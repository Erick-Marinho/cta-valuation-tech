"""create initial tables

Revision ID: 2d94142679e3
Revises: 
Create Date: 2025-04-08 XX:XX:XX.XXXXXX # Data/Hora serão diferentes

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = '2d94142679e3'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Criar a extensão vector se não existir
    op.execute("CREATE EXTENSION IF NOT EXISTS vector;")

    # Criar tabela documentos_originais
    op.create_table('documentos_originais',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('nome_arquivo', sa.Text(), nullable=False),
        sa.Column('tipo_arquivo', sa.Text(), nullable=True),
        sa.Column('conteudo_binario', sa.LargeBinary(), nullable=True), # Usar LargeBinary para bytea
        sa.Column('data_upload', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('metadados', postgresql.JSONB(astext_type=sa.Text()), nullable=True), # Usar JSONB
        # Adicione outras colunas se necessário (ex: size_kb INTEGER)
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_documentos_originais_nome_arquivo'), 'documentos_originais', ['nome_arquivo'], unique=False)

    # Criar tabela chunks_vetorizados
    op.create_table('chunks_vetorizados',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('documento_id', sa.Integer(), nullable=False),
        sa.Column('texto', sa.Text(), nullable=False),
        # Usar um tipo genérico para vector que Alembic entende ou executar raw SQL
        # sa.Column('embedding', postgresql.ARRAY(sa.Float)), # Alternativa se não usar tipo vector específico
        sa.Column('pagina', sa.Integer(), nullable=True),
        sa.Column('posicao', sa.Integer(), nullable=True),
        sa.Column('metadados', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(['documento_id'], ['documentos_originais.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    # Adicionar coluna vector via SQL (mais seguro para tipos não padrão)
    op.execute("ALTER TABLE chunks_vetorizados ADD COLUMN embedding vector(1024);") # Ajuste a dimensão!

    op.create_index(op.f('ix_chunks_vetorizados_documento_id'), 'chunks_vetorizados', ['documento_id'], unique=False)
    # Adicionar índice HNSW para busca vetorial (ajuste parâmetros conforme necessidade)
    op.execute("CREATE INDEX IF NOT EXISTS ix_chunks_embedding ON chunks_vetorizados USING hnsw (embedding vector_cosine_ops) WITH (m = 16, ef_construction = 64);")

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Ordem reversa para exclusão
    op.drop_index(op.f('ix_chunks_embedding'), table_name='chunks_vetorizados', if_exists=True)
    op.drop_index(op.f('ix_chunks_vetorizados_documento_id'), table_name='chunks_vetorizados')
    op.drop_table('chunks_vetorizados') # Inclui a coluna vector adicionada via execute

    op.drop_index(op.f('ix_documentos_originais_nome_arquivo'), table_name='documentos_originais')
    op.drop_table('documentos_originais')

    # Opcional: Remover a extensão
    # op.execute("DROP EXTENSION IF EXISTS vector;")

    # ### end Alembic commands ###
