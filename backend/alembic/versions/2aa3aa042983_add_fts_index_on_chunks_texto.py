"""add_fts_index_on_chunks_texto

Revision ID: xxxx  # <-- Será diferente para você
Revises: yyyy      # <-- ID da revisão anterior
Create Date: zz   # <-- Data de criação

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
# Remova outras importações se não forem necessárias (como sqlmodel)

# revision identifiers, used by Alembic.
revision: str = '2aa3aa042983' # <-- CORREÇÃO: ID baseado no nome do arquivo
down_revision: Union[str, None] = '2d94142679e3' # <-- CORREÇÃO: ID da revisão anterior (create_initial_tables)
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Adicionar comando para criar o índice FTS
    # Usar 'concurrently' se quiser evitar bloqueio em produção (requer fora de transação)
    # Mas para setup inicial, sem 'concurrently' é mais simples.
    print("Creating FTS index idx_fts_chunks_texto...")
    op.execute("""
        CREATE INDEX idx_fts_chunks_texto
        ON chunks_vetorizados
        USING gin(to_tsvector('portuguese', texto));
    """)
    print("FTS index idx_fts_chunks_texto created.")

    # Pode haver outros comandos gerados automaticamente aqui, mantenha-os se necessário
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Adicionar comando para remover o índice FTS
    print("Dropping FTS index idx_fts_chunks_texto...")
    op.execute("""
        DROP INDEX idx_fts_chunks_texto;
    """)
    print("FTS index idx_fts_chunks_texto dropped.")

    # Pode haver outros comandos gerados automaticamente aqui, mantenha-os se necessário
    # ### end Alembic commands ###
