services:
  frontend:
    build: ./frontend
    container_name: frontend_app
    ports:
      - '${FRONTEND_PORT:-3000}:3000'
    volumes:
      - ./frontend:/app:cached
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_API_URL=http://backend:8000
      - REACT_APP_THEME=${REACT_APP_THEME:-light}
      - REACT_APP_DEFAULT_LANGUAGE=${REACT_APP_DEFAULT_LANGUAGE:-pt-BR}
      - REACT_APP_ENABLE_ANALYTICS=${REACT_APP_ENABLE_ANALYTICS:-false}
      - REACT_APP_ENABLE_CHAT_HISTORY=${REACT_APP_ENABLE_CHAT_HISTORY:-true}
      - REACT_APP_MAX_DOCS_UPLOAD=${REACT_APP_MAX_DOCS_UPLOAD:-10}
      - REACT_APP_CACHE_DURATION=${REACT_APP_CACHE_DURATION:-30}
      - REACT_APP_VERSION=${APP_VERSION:-1.0.0}
    depends_on:
      - backend

  backend:
    build: ./backend
    container_name: backend_app
    ports:
      - '${BACKEND_PORT:-8000}:8000'
    volumes:
      - ./backend:/app:delegated
      - ./backend/documents:/app/documents:delegated
      - nltk_data_volume:/app/nltk_data
    env_file:
      - ./backend/.env
    command: [
        'uvicorn',
        'app:app',
        '--host',
        '0.0.0.0',
        '--port',
        '8000',
        '--reload',
        '--reload-dir',
        '/app', # Diretório a ser monitorado
        '--reload-delay',
        '0.1', # Delay entre reloads
      ]
    environment:
      - WATCHFILES_FORCE_POLLING=true # Força o polling em sistemas que não suportam inotify
      - WATCHFILES_POLL_INTERVAL=0.1 # Intervalo de polling em segundos
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
    depends_on:
      postgres:
        condition: service_healthy
      tempo:
        condition: service_started
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health/ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  postgres:
    image: ankane/pgvector:latest
    container_name: postgres_db
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-vectordb}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    ports:
      - '${PGADMIN_PORT:-5050}:80'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-pgadmin}
    depends_on:
      - postgres
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=5d'
      - '--web.enable-lifecycle'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    dns:
      - 8.8.8.8
      - 8.8.4.4

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    user: '0:0'
    command: ['-config.file=/etc/tempo.yaml']
    volumes:
      - ./tempo/tempo-config.yaml:/etc/tempo.yaml
      - tempo_data:/var/lib/tempo
    ports:
      - '4317:4317'
      - '4318:4318'
      - '3200:3200'
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3200/status',
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - '3001:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped
    depends_on:
      - prometheus
      - tempo
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3000',
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  mlflow_server:
    build: ./mlflow_config
    container_name: mlflow_server
    ports:
      - '5000:5000'
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    env_file:
      - ./backend/.env
    command: >
      sh -c "
      mlflow server
      --host 0.0.0.0
      --port 5000
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/mlflow_db
      --default-artifact-root /mlflow/artifacts
      "
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  node_modules:
  pgadmin_data:
  prometheus_data:
  tempo_data:
  grafana_data:
  mlflow_artifacts:
  nltk_data_volume: {}
